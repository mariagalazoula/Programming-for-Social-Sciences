# -*- coding: utf-8 -*-
"""
Created on Thu Oct 25 16:28:53 2018

@author: gy16mg
"""

#Create an Agent Class, where we will give the agents all of the 
#attributes that they will need for this model. First, we create the 
#agents by creating an initial function called __init__, where we 
#assign the attributes of the agents, such as the neighbourhood, 
#environment, etc and we also create the functions needed for this model,
#in order to move the agents, to make them eat, to calculate 
#the distances between the agents and to make them share with their neighbours.

import random  

#create the class for the agents:
class Agent:
    
#create the agents and their attributes
    def __init__(self, environment, agents, neighbourhood):
        """Give attributes to the agents:
        
        In ths __init__  we give each of the agents their attributes, which are:
            self.x -- x coordinate of the agent
            self.y -- y coordinate of the agent
            environment -- the environment of the agents
            agents -- the other agents that will be created
            neighbourhood -- 
        
        
        """
        self.y = random.randint(0,300)
        self.x = random.randint(0,300)
        self.environment = environment
        self.store = 0
        self.agents = agents
        self.neighbourhood = neighbourhood

#function for moving the agents using the Torus, where the modulus operator is used          
    def move(self):
        """This function moves the agents:
        
        Arguments: 
            self -- agent
            
        Based on a random number that is generated by random.random() 
        the agent will move based on this number. This occurs for both 
        coordinates. 
        
        Returns:
        The new position of the agent.
        
        """
        if random.random()<0.5:
            self.x = (self.x + 1)%300 
        else:
            self.x = (self.x - 1)%300
        
        if random.random()<0.5: 
            self.y = (self.y + 1)%300
        else:
            self.y = (self.y - 1)%300

#function for "eat", where agents can "eat" the environment around them and store 
#depending on the value of the environment
    def eat(self):
        """This function makes the agents "eat" from the environment:
        
        Arguments: 
        self -- agent
            
        In this function the agents start eating and storing from the environment.
        The condition however is that the value of the environment has to be greater than 10.
        
        Returns:
        The new store and the new value of the environment of the agent.
        
        """
        if self.environment[self.y][self.x] > 10:
            self.environment[self.y][self.x] -= 10
            self.store +=10
        else:
            self.store = self.environment[self.y][self.x]  
            self.environment[self.y][self.x] -= 10
                       
#function to calculate the distance of two agents using the Pythagorean Theoreum     
    def dist(self, agent):
        """This function gives the Euclidean distance between two agents.
        
        Arguments: 
        self -- agent
        agent -- the other agent that is required for calculating of the distance    
        
        Returns:
        The distance between two agents.
        
        """
        return (((self.y-agent.y)**2)+ ((self.x-agent.x)**2))**0.5

#function to share the store with the agent-neighbours
#based on their distance, which should be less than the neighbourhood that we set
    def share_with_neighbours(self,neighbourhood):
        """This function gives the Euclidean distance between two agents.
        
        Arguments: 
        self -- agent
        agent -- the other agent that is required for calculating of the distance and to share with our agent the store.   
        The condition is whether the two agents are in the same neighbourhood. 
        
        Returns:
        The new store of the two agents.
        
        """
        for agent in self.agents:
            distance= self.dist(agent)
            if distance<= self.neighbourhood:
                sum= self.store + agent.store
                average = sum/2
                self.store= average
                agent.store = average
            else:
                self.store = self.store
                agent.store = agent.store
                
                
      

         
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                